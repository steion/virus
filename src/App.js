import React, { useState, useEffect } from 'react';

import {
  View,
  Panel,
  CardGrid,
  Card,
  Root,
  Div,
  Button,
  Avatar,
  Snackbar,
  Group,
  SimpleCell,
  PanelHeader,
  ConfigProvider,
  ScreenSpinner,
  PullToRefresh,
  ModalRoot,
  ModalCard
} from '@vkontakte/vkui';

import bridge from '@vkontakte/vk-bridge';

import {
  disableBodyScroll
} from 'body-scroll-lock';

import Icon20Stars from '@vkontakte/icons/dist/20/stars';
import Icon20CancelCircleFillRed from '@vkontakte/icons/dist/20/cancel_circle_fill_red';
import Icon28ReplyOutline from '@vkontakte/icons/dist/28/reply_outline';
import Icon28StoryOutline from '@vkontakte/icons/dist/28/story_outline';
import Icon16User from '@vkontakte/icons/dist/16/user';
import Icon24Fire from '@vkontakte/icons/dist/24/fire';
import Icon24Report from '@vkontakte/icons/dist/24/report';
import Icon16Done from '@vkontakte/icons/dist/16/done';

import Virus from './images/virus.svg';
import Nutri from './images/nutri.svg';

import { socket } from "./config";

let dev = false;

const decl = (n, titles) => titles[(n%10===1 && n%100!==11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)];
const stages = ["start", "info", "finish"];

socket.emit("login", window.location.search);

export default () => {
  const [activeView, setView] = useState("home");
  const [snackbar, setSnackbar] = useState();
  const [isFetching, setFetching] = useState(false);
  // eslint-disable-next-line no-unused-vars
  const [platform, setPlatform] = useState(Object.fromEntries(new URLSearchParams(window.location.search)).vk_platform);
  const [fetchedUser, setFetchedUser] = useState();
  const [infected, setInfected] = useState(null);
  const [card, setCard] = useState(true);
  const [user, setUser] = useState(null);
  const [signError, setSignError] = useState(false);
  const [activeStage, setStageIntro] = useState(0);
  const [activeModal, setModal] = useState("");
  // eslint-disable-next-line no-unused-vars
  const [history, setHistory] = useState(['home']);
  const [popout, setPopout] = useState(!dev ? <ScreenSpinner /> : null);
  
  const goBack = () => {
    if(history.length === 1) {
      bridge.send("VKWebAppClose", {
        "status": "success"
      });
    } else if(history.length > 1) {
      history.pop();
      
      setView(history[history.length - 1]);
    }
  }
  
  const copyLink = async () => {
    try {
      bridge.send('VKWebAppCopyText', {
        text: !dev ? "https://vk.com/app7722330#"+fetchedUser.id : "https://vk.com/app7722330#483313209"
      });
      
      setSnackbar(<Snackbar
          onClose={() => setSnackbar(null)}
          before={<Avatar size={24} style={{ background: 'var(--accent)' }}><Icon16Done fill="#FFFFFF" width={14} height={14} /></Avatar>}
        >
          –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!
        </Snackbar>
      );
    } catch(e) {
      setSnackbar(<Snackbar
          onClose={() => setSnackbar(null)}
          before={<Icon20CancelCircleFillRed width={24} height={24} />}
        >
          –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!
        </Snackbar>
      );
    }
  };
  
  const shareWall = () => {
    bridge.send("VKWebAppShowWallPostBox",
      {
        "message": "üî• –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π –º–æ–Ω–µ—Ç–∫–∏! –î–∞-–¥–∞! –ò–º–µ–Ω–Ω–æ –º–æ–Ω–µ—Ç–∫–∏! –í–æ—Ç —Å—Å—ã–ª–∫–∞: https://vk.com/app7722330#"+fetchedUser.id
      }
    )
  }
  
  const shareStory = () => {
    bridge.sendPromise("VKWebAppShowStoryBox",
      {
        background_type: "image",
        url : "https://sun9-2.userapi.com/impf/C5-4xiXDmFrX8iy86Qr3rZymB5jR3IZFeXsMwA/HRm-NZJmqFQ.jpg?size=608x1080&quality=96&sign=bd5794feccd727c41a0f0adb29e61768&c_uniq_tag=rN3pfYYU3pAP6tTsfUyYwOtB5J9qc81ia6HRDujYczQ&type=album",
        attachment: {
          text: "go_to",
          type: "url",
          url: "https://vk.com/app7722330#"+fetchedUser.id,
        }
      }
    ).catch((e) => {
      setSnackbar(<Snackbar
          onClose={() => setSnackbar(null)}
          before={<Icon20CancelCircleFillRed width={24} height={24} />}
        >
          –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!
        </Snackbar>
      );
    });
  };
  
  const UseTablet = () => {
    if((card && (user.tablets > 0 || user.deathTime > 0))) {
      return (<CardGrid size="l">
        <Card style={{ marginTop: 10, width: "100%"  }} >
          <div style={{ height: "1vmax" }} />
          <span className="homeModal__secondText">{user.deathTime > 0 ? "–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏—Ç—å" : "–í—ã —É–º–µ—Ä–ª–∏"}</span><br/> <span className="homeModal__count">{date(user.deathTime)}</span>
          {user.tablets > 0 && (<SimpleCell className="cell" onClick={() => socket.emit("useTablet")} >
            <div className="center">
              <div style={{ width: "4vmax", height: "4vmax" }} className="circle">
                <Icon20Stars width={28} height={28} fill="#0092FF" />
              </div>
              
              <span style={{ paddingLeft: "1vmax" }} className="useTablet">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É</span>
            </div>
          </SimpleCell>)}
          
        </Card>
      </CardGrid>)
    }
  }
  // eslint-disable-next-line no-unused-vars
  const HomeModal = () => {
    return (<div className="modal">
      <div className="homeModal">
        <div style={{ height: "2vmax" }} />
        
        <CardGrid>
          <Card style={{ marginTop: 10, width: "100%", height: "10vmax" }} >
            <div style={{ height: "1vmax" }} />
            
            <span className="homeModal__secondText">–í—ã –∑–∞—Ä–∞–∑–∏–ª–∏</span><br/> <span className="homeModal__count">{user.infectedCount} {decl(user.infectedCount,  ["—á–µ–ª–æ–≤–µ–∫–∞", "—á–µ–ª–æ–≤–µ–∫–∞", "—á–µ–ª–æ–≤–µ–∫"])}</span>
          </Card>
        </CardGrid>
        
        {UseTablet()}
        
        <div style={{ height: "2vmin" }} />
        
        <CardGrid>
          <Card style={{ marginTop: 10, width: "100%"  }} >
            <Div>
              <Button stretched size="l" onClick={copyLink} mode="outline">–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É</Button>
            </Div>
            
            <Div>
              <Button stretched size="l" onClick={() => go("repost")} mode="outline">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π</Button>
            </Div>
            
            {user.rewarded === false && (<Div>
              <Button stretched size="l" onClick={() => showAd()} mode="outline">–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É</Button>
            </Div>)}
          </Card>
        </CardGrid>
      </div>
    </div>);
  }
  
  const go = (page) => {
    window.history.pushState({
      panel: page
    }, page);
    
    setView(page);
    
    history.push(page);
  }
  
  const showAd = () => {
    if(user.rewarded === false) {
      if(platform !== "mobile_web") {
        bridge.send("VKWebAppShowNativeAds", {
          ad_format: "reward"
        }).then((res) => {
          if(res.result === true) {
            socket.emit("freeTablet");
          } else {
            setSnackbar(<Snackbar
                onClose={() => setSnackbar(null)}
                before={<Icon20CancelCircleFillRed width={24} height={24} />}
              >
                –í—ã –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Ä–µ–∫–ª–∞–º—É!
              </Snackbar>
            );
          }
        }).catch((err) => {
          setSnackbar(<Snackbar
              onClose={() => setSnackbar(null)}
              before={<Icon20CancelCircleFillRed width={24} height={24} />}
            >
              –°–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–µ—Ç–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!
            </Snackbar>
          );
        });
      } else {
        socket.emit("freeTablet");
      }
    } else {
      setSnackbar(<Snackbar
          onClose={() => setSnackbar(null)}
          before={<Icon20CancelCircleFillRed width={24} height={24} />}
        >
          –°–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–µ—Ç–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!
        </Snackbar>
      );
    }
  }
  
  const endIntro = () => {
    setView("home");
    
    socket.emit("endIntro");
  }
  
  socket.on("user", (userObject) => {
    setUser(userObject);
    
    setInfected(userObject.infected);
    
    if(userObject.dead === true) setCard(false);
  });
  
  socket.on("errorMessage", (error) => {
    if(error.code === 1) {
      if(!snackbar) setSnackbar(<Snackbar
          onClose={() => setSnackbar(null)}
          before={<Icon20CancelCircleFillRed width={24} height={24} />}
        >
          –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!
        </Snackbar>
      );
    } else if(error.code === 2) {
      setSnackbar(<Snackbar
          onClose={() => setSnackbar(null)}
          before={<Icon20CancelCircleFillRed width={24} height={24} />}
        >
          –°–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–µ—Ç–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!
        </Snackbar>
      )
    } else if(error.code === 3) {
      setSignError(true);
      setUser({});
    } else if(error.code === 4) {
      go("alreadyOnline");
      setUser({});
    }
  });
  
  const closeModal = () => {
    setModal(null);
    setCard(false);
    
    socket.emit("viewed");
  }
  
  const modal = (
    <ModalRoot activeModal={activeModal}>
      <ModalCard onClose={closeModal} id="dead" icon={<Icon20CancelCircleFillRed width={56} height={56} />} header="–í—ã —É–º–µ—Ä–ª–∏">
        <div style={{ height: "2vmax" }} />
        <Button size="l" onClick={closeModal} mode="outline">–ñ–∞–ª—å</Button>
      </ModalCard>
    </ModalRoot>
  );
  
  useEffect(() => {
    const fetchData = async () => {
      bridge.sendPromise('VKWebAppGetUserInfo').then((res) => {
        setFetchedUser(res);
        setPopout(null);
      });
    }
    
    fetchData();
    
    disableBodyScroll(document.body);
    
    window.addEventListener('popstate', () => {
      if(activeView !== "offline") goBack()
    });
    
    window.addEventListener(
      'offline', 
      () => {
        socket.close();
        go("offline");
      }
    );
    
    window.addEventListener(
      'online',
      () => {
        socket.open();
        
        goBack();
      }
    );
    
    let hash = window.location.hash;
    
    if(hash) {
      setPopout(null);
      socket.emit("infected", hash);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  
  useEffect(() => {
    setTimeout(() => {
      bridge.sendPromise("VKWebAppShowNativeAds", {
        ad_format: "preloader"
      })
    }, 1000);
  }, [fetchedUser]);
  
  return user && (signError === false ? (user.intro === true ? (
    <ConfigProvider isWebView={true} scheme="bright_light">
      <Root activeView={activeView}>
        <View id="home" activePanel="home" history={history} modal={modal} onSwipeBack={goBack} popout={popout}>
          <Panel id="home">
            <PullToRefresh isFetching={isFetching} onRefresh={() => { setTimeout(() => {setFetching(false)}, 3000); setFetching(true); socket.emit("user");} }>
            <img src={Virus} className="virusImg" alt="–í–∏—Ä—É—Å" />
            
            <div style={{ textAlign: "center" }}>
              <span className="virusText PanelHeader__content">
                –í–∏—Ä—É—Å
              </span>
            </div>
            
            {user.dead === true ? (<div className="modal">
              <div className="homeModal">
                <div style={{ height: "2vmax" }} />
                <div className="fuckingCenter">
                  <div style={{ height: "5vmax" }} />
                  <CardGrid>
                    <Card style={{ marginTop: 10, width: "100%"  }} >
                      <Div>
                        <div style={{ height: "3vmax" }} />
                        
                        <Icon24Report className="img" fill="#E61D00" width={100} height={100} />
                        
                        <span className="homeModal__count">
                          –í—ã —É–º–µ—Ä–ª–∏ :(
                        </span>
                        
                        <div style={{ height: "1vmin" }} />
                        
                        <span className="homeModal__secondText">
                          –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è
                        </span>
                        
                        <div style={{ height: "3vmax" }} />
                      </Div>
                    </Card>
                  </CardGrid>
                </div>
              </div>
            </div>) : (HomeModal())}
            
            {snackbar}
            </PullToRefresh>
          </Panel>
        </View>
        
        <View id="offline" activePanel="offline" modal={modal} popout={popout}>
          <Panel id="offline">
            <div className="white__background">
              <div className="center">
                <img alt="–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞" src={Nutri} className="nutriImg" style={{ width: "30vmax", height: "30vmax" }} />
                
                <div className="intro__text" style={{ textAlign: "center", marginTop: "5vmax" }}>
                  –ö—É–¥–∞ —Ç–æ –ø—Ä–æ–ø–∞–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç! –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ –ø–æ—Å–∫–æ—Ä–µ–µ!
                </div>
              </div>
            </div>
          </Panel>
        </View>
        
        <View id="alreadyOnline" activePanel="alreadyOnline" history={history} modal={modal} onSwipeBack={goBack} popout={popout}>
          <Panel id="alreadyOnline">
            <div className="white__background">
              <div className="fuckingCenter">
                <img alt="–£–∂–µ –æ–Ω–ª–∞–π–Ω" src={Nutri} className="nutriImg" style={{ width: "30vmax", height: "30vmax" }} />
                
                <div className="intro__text" style={{ textAlign: "center", marginTop: "5vmax" }}>
                  –í—ã —É–∂–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?
                </div>
              </div>
            </div>
          </Panel>
        </View>
        
        <View id="repost" activePanel="repost" history={history} modal={modal} onSwipeBack={goBack} popout={popout}>
          <Panel id="repost">
            <div className="white__background">
              <PanelHeader>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</PanelHeader>
              
              <Div>
                <CardGrid>
                  <Card size="l">
                    <div style={{ paddingBottom: "1vmax" }}>
                      <Group>
                        <SimpleCell
                          before={<Icon28StoryOutline fill="#0092FF" />}
                          onClick={shareStory}
                        >
                          –í –∏—Å—Ç–æ—Ä–∏—é
                        </SimpleCell>
                      </Group>
                      
                      <Group>
                        <SimpleCell
                          before={<Icon28ReplyOutline fill="#0092FF" />}
                          onClick={shareWall}
                        >
                          –ù–∞ —Å—Ç–µ–Ω—É
                        </SimpleCell>
                      </Group>
                      
                      <Div>
                        <Button stretched size="l" onClick={() => goBack()} mode="outline">–û—Ç–º–µ–Ω–∞</Button>
                      </Div>
                    </div>
                  </Card>
                </CardGrid>
              </Div>
            </div>
          </Panel>
        </View>
      </Root>
    </ConfigProvider>
  ) : (
    <View activePanel={stages[activeStage]} history={history} modal={modal} onSwipeBack={goBack} popout={popout}>
      <Panel id="start">
        <div className="white__background">
          <div className="fuckingCenter">
            <Icon24Report className="img" fill="#E61D00" width={100} height={100} />
            
            <div className="intro__text" style={{ textAlign: "center", marginTop: "2vmax" }}>
              –ü—Ä–∏–≤–µ—Ç!<br /><br />
              {infected && infected.id > 0 ? `${infected.firstName} –∑–∞—Ä–∞–∑–∏–ª —Ç–µ–±—è! –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —á—Ç–æ–±—ã –≤—ã–ª–µ—á–∏—Ç—å—Å—è!` : `–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –ø—É—Ç—ë–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–∂—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.`}<br />
              –ü–µ–π —Ç–∞–±–ª–µ—Ç–∫–∏, –∑–∞—Ä–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –∏ –∂–∏–≤–∏!
            </div>
            
            <Div>
              <Button stretched size="l" onClick={() => setStageIntro(1)} mode="outline">–ê —á—Ç–æ –º–Ω–µ –≤–æ–æ–±—â–µ –¥–µ–ª–∞—Ç—å?</Button>
            </Div>
          </div>
        </div>
      </Panel>
      
      <Panel id="info">
        <div className="white__background">
          <div className="fuckingCenter">
            <Icon16User className="img" fill="#0092FF" width={100} height={100} />
            
            <div className="intro__text" style={{ textAlign: "center", marginTop: "2vmax" }}>
              –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–µ—Ç–∫–∏ –∏–ª–∏ –∑–∞—Ä–∞–∑–∏ —á–µ–ª–æ–≤–µ–∫–∞ —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏.<br />
              –ß—Ç–æ–±—ã –∑–∞—Ä–∞–∑–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –µ–º—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∑–∞—Ä–∞–∂—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.<br />
              –ó–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ä–∞–∂—ë–Ω–Ω–æ–≥–æ —É –≤–∞—Å –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É.
            </div>
            
            <Div>
              <Button stretched size="l" onClick={() => setStageIntro(2)} mode="outline">–ú–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ.</Button>
            </Div>
          </div>
        </div>
      </Panel>
      
      <Panel id="finish">
        <div className="white__background">
          <div className="fuckingCenter">
            <Icon24Fire className="img" fill="#FFBE00" width={100} height={100} />
            
            <div className="intro__text" style={{ textAlign: "center", marginTop: "2vmax" }}>
              –ï—Å–ª–∏ –≤—ã –≤—Å—ë —Ç–∞–∫–∏ —É–º–µ—Ä–ª–∏ –≤–∞—Å —É–∂–µ –Ω–µ—á–µ–≥–æ –Ω–µ —Å–ø–∞—Å—ë—Ç.<br /><br />
              –ù–∞ —ç—Ç–æ–º –≤—Å—ë, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–∂–∏—Ç—å!
            </div>
            
            <Div>
              <Button stretched size="l" onClick={() => endIntro()} mode="outline">–ü–æ–Ω—è—Ç–Ω–æ!</Button>
            </Div>
          </div>
        </div>
      </Panel>
    </View>
  )) : (
    <View activePanel="err" history={history} modal={modal} onSwipeBack={goBack} popout={popout}>
      <Panel id="err">
        <div className="white__background">
          <div className="fuckingCenter">
            <img alt="–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫" src={Nutri} className="nutriImg" style={{ width: "30vmax", height: "30vmax" }} />
            
            <div className="intro__text" style={{ textAlign: "center", marginTop: "5vmax" }}>
              –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.
            </div>
          </div>
        </div>
      </Panel>
    </View>
  ));
}

function date(stamp) {
  stamp = stamp / 1000;

  let s = stamp % 60;
  stamp = ( stamp - s ) / 60;

  let m = stamp % 60;
  stamp = ( stamp - m ) / 60;

  let h = ( stamp ) % 24;
  let d = ( stamp - h ) / 24;

  let text = ``;

  if(d > 0) text += Math.floor(d) + " –¥. ";
  if(h > 0) text += Math.floor(h) + " —á. ";
  if(m > 0) text += Math.floor(m) + " –º–∏–Ω. ";
  if(s > 0 && text === ``) text += Math.floor(s) + " —Å.";

  return text;
}